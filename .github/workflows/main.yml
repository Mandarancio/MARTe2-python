
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest
    name: Docker Build and Push
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        env:
          DOCKER_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
        run: echo "${DOCKER_REGISTRY_PASSWORD}" | docker login -u "${DOCKER_REGISTRY_USER}" --password-stdin

      - name: Build and push Docker image
        run: |
          export IMAGE_NAME=${{ secrets.CI_REGISTRY_IMAGE }}
          docker build -t $IMAGE_NAME:${{ github.ref_name }} .
          docker push $IMAGE_NAME:${{ github.ref_name }}
    env:
      DOCKER_BASE: ${{ secrets.DOCKER_BASE }}

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest coverage

      - name: Run pytest
        run: |
          pytest --cov=martepy --cov-report=term --cov-report=html:cov_html --cov-fail-under=90
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: cov_html/
          retention-days: 30

  linting:
    runs-on: ubuntu-latest
    name: Code Linting
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install pylint
        run: pip install pylint

      - name: Run pylint
        run: pylint martepy

  docs:
    runs-on: ubuntu-latest
    name: Build Documentation
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install sphinx

      - name: Build HTML docs
        run: |
          cd docs
          make html

      - name: Upload Documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: docs/build/html
          retention-days: 7

  pages:
    runs-on: ubuntu-latest
    name: Deploy Documentation to Pages
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy documentation to public folder
        run: |
          mkdir -p public
          rm -rf public/*
          cp -a docs/build/html/* public/

      - name: Upload Pages Artifact
        uses: actions/upload-artifact@v2
        with:
          name: pages
          path: public/
          retention-days: 365